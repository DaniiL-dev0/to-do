[] Структура описания классов: переписать все классы в соответствии с этим планом!
    -приватные поля
    -публичные методы:
        конструкторы по умолчанию
        перемещающие конструкторы
        деструктор
        операторы присваивания
        прочие операторы
        остальные методы
    защищенные методы
    приватные методы
[x] Геттеры к полям класса -> имя_поля()
      Сеттеры -> set_поле_класса()
[x] Переименовать базовые классы: base_class_имякласа.h
[x] Реализовать класс Кадр - общий класс, хранящий информацию для отрисовки текущего кадра
[x] Поля класса всегда заканчиваются нижним подчеркиванием
(исправить в уже созданных классах)
[ ] Как обрабатывать действия пользователя в UI:
    каждый виджет будет имет метод активации, выйти из которого можно нажатием нужной клавиши. И к тому же
    нужно иметь возможность задавать функцию-обработчик, которая будет запускаться при выходе из метода активации
[ ] Как осуществить взаимодействие между модулями с учетом последовательного/многопоточного
    выполнения программы
[ ] создать прототип цельной программы с возможностью чтения начальной конфигурации
    и взаимодействия с UI без pos

    Вопрос переключения с виджета на виджет в CUI -> решится вопрос построения 
    всего модуля UI: какие входные/выходные данные будут и т.д.
[ ] 1) организовать систему наследования: каждый виджет может иметь предка в лице другого класса с реализацией;
    единственное на чем это сказывается, это на расположении на экране -> сделать менеджер виджетов,
    который будет управлять активностью виджетов и возможнотью переключения с одного на другой
[ ] 2) добавить возможность вычисления ширины/высоты виджета и задавать их вручную
[ ] построить механизм выбора типа UI уже после компиляции
[ ] все методы класса, вовзращающие ссылки лучше lr-аннотировать

